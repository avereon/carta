<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>com.avereon.pom</groupId>
		<artifactId>mod</artifactId>
		<version>3.6.4</version>
	</parent>

	<groupId>com.avereon</groupId>
	<artifactId>carta</artifactId>
	<version>1.4-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>Cartesia</name>
	<description>2D/3D computer aided design.</description>
	<inceptionYear>2020</inceptionYear>

	<repositories>
		<repository>
			<id>avn</id>
			<url>https://repo.avereon.com/avn</url>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>avn</id>
			<url>https://repo.avereon.com/avn</url>
		</pluginRepository>
	</pluginRepositories>

	<properties>
		<!-- Version numbers updated 28 Apr 2025 -->
		<xenon.version>1.10-SNAPSHOT</xenon.version>
		<curve.version>0.6-SNAPSHOT</curve.version>
		<marea.version>0.4-SNAPSHOT</marea.version>
		<zerra.version>0.11</zerra.version>
		<xenos.version>1.9</xenos.version>
		<cameo.version>2.12</cameo.version>
		<jep.version>2.24</jep.version>
		<monocle.version>21.0.2</monocle.version>
		<mockito.version>5.20.0</mockito.version>
		<images-folder>target/main/images</images-folder>
	</properties>

	<dependencies>

		<dependency>
			<groupId>com.avereon</groupId>
			<artifactId>curve</artifactId>
			<version>${curve.version}</version>
		</dependency>

		<dependency>
			<groupId>com.avereon</groupId>
			<artifactId>marea</artifactId>
			<version>${marea.version}</version>
		</dependency>

		<dependency>
			<groupId>com.avereon</groupId>
			<artifactId>zerra</artifactId>
			<version>${zerra.version}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>com.avereon</groupId>
			<artifactId>xenos</artifactId>
			<version>${xenos.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>jep</groupId>
			<artifactId>jep</artifactId>
			<version>${jep.version}</version>
		</dependency>

		<dependency>
			<groupId>org.mapstruct</groupId>
			<artifactId>mapstruct</artifactId>
			<version>${mapstruct.version}</version>
		</dependency>

		<dependency>
			<groupId>org.testfx</groupId>
			<artifactId>openjfx-monocle</artifactId>
			<version>${monocle.version}</version>
			<scope>test</scope>
			<exclusions>
				<!-- Exclude the openjfx libraries, they are already available -->
				<exclusion>
					<groupId>org.openjfx</groupId>
					<artifactId>*</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>net.bytebuddy</groupId>
			<artifactId>byte-buddy-agent</artifactId>
			<version>${bytebuddy.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>${mockito.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-junit-jupiter</artifactId>
			<version>${mockito.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>${java.version}</source>
					<target>${java.version}</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<!-- Version comes from parent -->
				<configuration>
					<forkCount>0.5C</forkCount>
					<argLine>
						-Xmx128m
						--add-opens=javafx.base/com.sun.javafx.logging=ALL-UNNAMED
						--add-opens=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
						--add-opens=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED
						--add-opens=javafx.graphics/com.sun.javafx.util=ALL-UNNAMED
						<!-- This works in Maven, of course, but not in IntelliJ -->
						<!--										-javaagent:${net.bytebuddy:byte-buddy-agent:jar}-->
						<!--										-javaagent:${org.mockito:mockito-core:jar}-->
						-javaagent:${settings.localRepository}/net/bytebuddy/byte-buddy-agent/${bytebuddy.version}/byte-buddy-agent-${bytebuddy.version}.jar
						-javaagent:${settings.localRepository}/org/mockito/mockito-core/${mockito.version}/mockito-core-${mockito.version}.jar
					</argLine>
				</configuration>
			</plugin>

			<plugin>
				<groupId>com.avereon</groupId>
				<artifactId>cameo</artifactId>
				<version>${cameo.version}</version>
				<executions>
					<execution>
						<id>render-images</id>
						<phase>package</phase>
						<goals>
							<goal>render</goal>
						</goals>
						<configuration>
							<images>
								<image>
									<class>com.avereon.cartesia.icon.CartesiaIcon</class>
									<target>${images-folder}/product.png</target>
									<theme>light</theme>
								</image>
							</images>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>screenshots1x</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec.maven.version}</version>
						<executions>
							<execution>
								<id>screenshots1x</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>java</executable>
									<classpathScope>compile</classpathScope>
									<arguments>
										<argument>-Xmx256m</argument>
										<argument>-p</argument>
										<modulepath/>
										<argument>-m</argument>
										<argument>com.avereon.carta/com.avereon.cartesia.CartesiaScreenshots</argument>
										<argument>1</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>screenshots2x</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>${exec.maven.version}</version>
						<executions>
							<execution>
								<id>screenshots2x</id>
								<phase>package</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>java</executable>
									<classpathScope>compile</classpathScope>
									<arguments>
										<argument>-Xmx256m</argument>
										<argument>-p</argument>
										<modulepath/>
										<argument>-m</argument>
										<argument>com.avereon.carta/com.avereon.cartesia.CartesiaScreenshots</argument>
										<argument>2</argument>
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>testui</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<!-- Version comes from parent -->
						<executions>
							<execution>
								<id>testui</id>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
								<configuration>
									<!-- There is not a way to configure Maven to fork the JVM per method. -->
									<forkCount>1</forkCount>
									<reuseForks>false</reuseForks>
									<runOrder>alphabetical</runOrder>
									<argLine>
										-Xmx128m
										--add-opens=javafx.base/com.sun.javafx.logging=ALL-UNNAMED
										--add-opens=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED
										--add-opens=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED
										--add-opens=javafx.graphics/com.sun.javafx.util=ALL-UNNAMED
										<!-- This works in Maven, of course, but not in IntelliJ -->
										<!--										-javaagent:${net.bytebuddy:byte-buddy-agent:jar}-->
										<!--										-javaagent:${org.mockito:mockito-core:jar}-->
										-javaagent:${settings.localRepository}/net/bytebuddy/byte-buddy-agent/${bytebuddy.version}/byte-buddy-agent-${bytebuddy.version}.jar
										-javaagent:${settings.localRepository}/org/mockito/mockito-core/${mockito.version}/mockito-core-${mockito.version}.jar
									</argLine>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<id>packs</id>
			<build>
				<plugins>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
